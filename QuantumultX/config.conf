# Quantumult Configuration(v1.0.0)
# 鸣谢 @QuentinHsu 提供疑问和Base Template 支持
;⚠️注意⚠️: 以下内容中，带“;” “#”的都是注释符号，去掉前面的符号，该行才有效
# =========================================================================================================================================================================

[general]

# 网络测试链接
network_check_url=http://bing.com

# Quantumult X 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试(测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间)，来确认节点的可用性
# 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间
# Quantumult 使用 HEAD 方法将 HTTP 请求发送到服务器检查 url 来测试代理的状态，结果应该是两个延迟，第一个是 TCP 与代理服务器的握手，第二个是 Quantumult 成功地从服务器检查 url 接收 HTTP 响应的总时间。闪电图标表示 TCP Fast Open 成功。
# 如果 [server_local] 或 [server_remote] 中的服务器有自己的 server_check_url，则会用自己的 server_check_url 代替 [general] 中的 server_check_url
# 你同样可以在 server_local/remote 中，为节点、订阅单独指定server_check_url参数
# 建议不使用 Google.com 进行测试,以避免节点机器人验证
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用
server_check_url= http://www.qualcomm.cn/generate_204
;http://www.gstatic.com/generate_204

# 【资源解析器】
;👍👍👍资源解析器，可用于自定义各类远程资源的转换，如节点，规则 filter，复写 rewrite 等，url 地址可远程，可 本地/iCloud(Quantumult X/Scripts目录);
; 此处使用CDN
resource_parser_url = https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/resource-parser.js
; github: https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/resource-parser.js

;👍👍geo_location_checker用于节点页面的节点信息展示，可完整自定义展示内容与方式
; extreme-ip-lookup为Quantumult X 作者提供的示范 api
;geo_location_checker=http://extreme-ip-lookup.com/json/, https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-location-with-script.js
;下面是我所使用的 api 及获取、展示节点信息的 js
geo_location_checker = http://ip-api.com/json/?lang=zh-CN, https://github.com/KOP-XIAO/QuantumultX/raw/master/Scripts/IP_API.js


;👍👍👍运行模式模块，running_mode_trigger 设置，即根据网络自动切换 分流/直连/全局代理 等模式。
;running-mode-trigger 模式下，跟手动切换直连/全局代理 等效，rewrite/task 模块始终会生效，比 ssid 策略组设置简单，比 ssid-suspend 更灵活。

;running_mode_trigger=filter, filter, NO-WIFI:all_direct, no: all_proxy
; 上述写法，前两个 filter 先后表示 在 4G 网络跟一般 Wi-Fi 下，走 filter(分流)模式，后面则表示在 asus-5g 下切换为全局直连，asus 切换为全局代理
; 如需使用，相应 SSID 换成你自己 Wi-Fi 名即可

;ssid_suspended_list，让 Quantumult X 在特定 Wi-Fi 网络下暂停工作(仅 task 模块会继续工作)，多个Wi-Fi用“,”连接
;ssid_suspended_list=NO-WIFI

# > DNS 排除列表 dns_exclusion_list
# list中的域名将不使用fake-ip方式, 多个域名用“, ”连接。其它域名则全部采用 fake-ip 及远程解析的模式
dns_exclusion_list = *.localnetwork.uop, *.qq.com

# > 排除路由
# 以下 ip-cidr 中的路由将不经由 QuantumultX 进行处理
excluded_routes = 192.168.0.0/16, 10.0.0.0/8, 172.16.0.0/12, 100.64.0.0/10, 17.0.0.0/8

# running_mode_trigger 设置，运行模式模块，即根据网络自动切换 分流/直连/全局代理 等模式。
# 可科学上网 WiFi 网络下直连，其余一般 WiFi 和移动网络走分流
# filter - 规则分流，all_proxy - 全部代理，all_direct - 全部直连
# 示例意思：[蜂窝数据],[Wi-Fi],[SSID]
# 下列示例的意思为：在蜂窝数据使用规则分流(第一个 filter)，在 Wi-Fi 使用规则分流(第二个 filter)，在 SSID 为 LINK_22E171 的 Wi-Fi 使用全部代理，，在 SSID 为 LINK_22E172 的 Wi-Fi 使用全部直连
# Rewrite 及 Task 模块始终生效
;running_mode_trigger=filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct
running_mode_trigger = filter, filter, P&S TECH3-5G-2:all_direct

# 说明：参数 fallback_udp_policy 的值仅支持末端策略（末端策略为经由规则模块和策略模块后所命中的策略，例如：direct、reject 以及节点；不支持内置策略 proxy 以及其它自定义策略）。默认为 reject。
# 当 UDP 请求经过规则模块以及策略模块后所命中的节点为 Quantumult X 所不支持 UDP 转发的节点（如：VMess、trojan），或支持 UDP 转发但未注明 udp-relay=true 的（例如：SS/SSR 且与服务器是否真实开启 UDP 转发无关），则 fallback_udp_policy 会被使用。
# 注意：如果您需要调整该参数的值为 direct，请务必清楚了解同一目标主机名 TCP 请求与 UDP 请求的源地址不同所造成的隐私及安全风险。
# 如果没有节点支持 UDP 转发，可取消下条注释（去除 ;）
;fallback_udp_policy=direct

# 在特定 SSID 网络时(除了 Task 模块)暂停 Quantumult X
;ssid_suspended_list=LINK_22E174, LINK_22E175

# 神马意思不清楚
icmp_auto_reply = true
[dns]
# DNS over HTTPS
# DoH 服务器(DNS over HTTPS)以加密的 HTTPS 协议进行 DNS 解析请求，避免原始 DNS 协议中用户的 DNS 解析请求被窃听或者修改的问题（例如中间人攻击）来达到保护用户隐私的目的
# 当 DoH 服务器被设置时，所有其他普通的（没有与之相关的特定域）服务器将被忽略。
# 设置 DoH 服务器后，所有其他常规 DNS 服务器设置将被忽略；当设置了多个 DoH 服务器时，只会使用第一个；当使用的 DoH 服务器不是基于 HTTP/2 时，DoH 将被暂时禁用。
# 当使用的 DoH 服务器不是基于 HTTP/2 时，DoH 将被暂时禁用，并使用常规服务器，直到下次启动 VPN 连接。
# 不建议在与防火墙相关的网络环境中使用，不确定 DoH 服务器是否总能被到达。
# 如果 DoH 服务器在您的国家或地区不是流行的 DNS 服务器，则不推荐使用，它可能会丢失 ISP DNS 服务器返回的 CDN 优化结果。
# 如果 DoH 服务器是一个反广告相关的服务器，则不推荐使用（Quantumult X 过滤模块对于被拒绝的域具有更好的性能，它可以避免客户端无休止的请求）。
# 如果您想让某个域名(例如：example.com)为 127.0.0.0.1，只需在「filter_local」部分添加「host, example.com, reject」即可。拒绝操作将返回 127.0.0.0.1 的 DNS 响应
# - doh-server=xxx.com, excluded_ssids=SSID1, SSID2
# - 指定 DoH  请求所使用的 User-Agent
# - doh_user_agent=Agent/1.0
;doh-server=https://dns.alidns.com/dns-query
;doh-server=https://223.6.6.6/dns-query
;doh-server=https://doh.pub/dns-query, excluded_ssids = NO-WIFI
;doh-server=https://e3e494e3.d.adguard-dns.com/dns-query, excluded_ssids = NO-WIFI
;doh-server=https://1.1.1.1/dns/

# SB DoH
# doh-server = https://doh.dns.sb/dns-query
# IIJ DoH
# doh-server = https://public.dns.iij.jp/dns-query
# 红鱼 DoH
# doh-server = https://rubyfish.cn/dns-query
# 阿里 DoH
# doh-server = https://dns.alidns.com/dns-query


# 如果只在中国大陆境内使用，推荐删除 1.0.0.1 和 8.8.8.8 两个 DNS
# 可以视情况取消 no-system 和 no-ipv6 前的注释

# > 通用域名 DNS

# 禁用系统 DNS
# 为了提高性能，会使用从当前网络(系统)中获取的 DNS 服务器(您可以使用「no-system」禁用此功能，但至少要增加一个自定义的DNS服务器，如「server=223.5.5.5.5」)。
;no-syetem

# 禁用 IPv6
# 当设置「no-ipv6」时，Quanumult X Tunnel 的 DNS 模块会直接让 AAAA 查询失败。
no-ipv6

# 阿里云公共 DNS
server = 223.5.5.5
server = 223.6.6.6
# 腾讯DnsPod+ DNS
server = 119.29.29.29
server = 119.28.28.28

server=182.254.116.116

# 南京信风 DNS
server = 114.114.114.114
server = 114.114.115.115
# 46ms 教育
#server = 202.202.0.33 
# 50ms 移动
#server = 218.201.4.3
#server = 218.201.17.2
# 30ms
server = 101.226.4.6 
# 52ms
server = 123.125.81.6


#server = 1.2.4.8
#server=119.29.29.29
#server=202.141.178.13

# 60ms 联通
#server = 221.5.203.98
#server = 221.7.92.98
# Google DNS
#server = 8.8.8.8
#server = 8.8.4.4
# ADGuard DNS
#server=94.140.14.49
#server=94.140.14.59

# 在特定的网络环境下忽略自定义 DNS 可在后方加上「excluded_ssids」相关字段。
# 注意：如配置了 no-system，则请务必确保在忽略了部分自定义 DNS 的配置下至少有一个可用的自定义 DNS 配置。
# server=114.114.114.114, excluded_ssids=SSID1, SSID2



;如指定 doh 服务，则👆️上面的一般 dns 解析均失效。支持 excluded_ssids 选项，在特定网络下禁用该 doh



# 此处可对特定域名指定相应 DNS
server=/*.taobao.com/223.5.5.5
server=/*.tmall.com/223.5.5.5
server=/*.alipay.com/223.5.5.5
server=/*.alicdn.com/223.5.5.5
server=/*.aliyun.com/223.5.5.5
server=/*.jd.com/119.29.29.29
server=/*.qq.com/119.29.29.29
server=/*.tencent.com/119.29.29.29
server=/*.weixin.com/119.29.29.29
server=/*.bilibili.com/119.29.29.29
server=/*.163.com/119.29.29.29
server=/*.126.com/119.29.29.29
server=/*.126.net/119.29.29.29
server=/*.mi.com/119.29.29.29
server=/*.xiaomi.com/119.29.29.29
server = /*.netease.com/119.29.29.29
server = /*testflight.apple.com/23.76.66.98
# > Google Dl
server=/dl.google.com/119.29.29.29
server=/dl.l.google.com/119.29.29.29
server=/update.googleapis.com/119.29.29.29

# 个人添加 待测试
server=/*.amemv.com/119.29.29.29 
server=/*.douyin.com/119.29.29.29

[policy]
## 策略组
# - 将分流规则传递过来的网络请求进行分发
# - server-tag-regex 以及 resource-tag-regex 参数用于正则筛选来建立策略组
# - resource-tag-regex 及 server-tag-regex 仅适用于 static、available 和 round-robin 类型的策略。
# - server-tag-regex: 根据节点标签进行正则匹配，匹配到的节点将会被选中。
# - 匹配所有节点正则：.*

# 类型：静态(static)
# 指向您手动选择的候选服务器。
;static=policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png

# 类型：可用(available)
# 指向候选服务器的第一个可用服务器(当策略被触发且策略结果不可用时，将立即启动并发 url 延迟测试。
# 如果当时没有网络请求接受策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但是这没有任何意义)。
;available=policy-name-2, Sample-A, Sample-B, Sample-C

# 类型：负载均衡(round-robin)
# 指向在候选服务器中指向下一个服务器以进行下一次连接。
;round-robin=policy-name-3, Sample-A, Sample-B, Sample-C

# 类型：延迟测试(url-latency-benchmark)
# 策略指向具有最佳 URL 延迟(公差，单位毫秒)结果的服务器。
# 当用户在 Quantumult X 中手动启动 URL 测试时，策略结果也会被更新。
# 该类型的策略有一个名为 check-interval(秒) 的参数，如果此策略已经被任何请求激活，则将考虑该间隔。
;url-latency-benchmark=policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, tolerance=0

# SSID
# 策略根据网络环境的不同指向服务器。
;ssid=policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C

# - img-url 参数用于指定策略组图标，可远程，也可本地/iCloud(Quantumult X/Images路径下) （108*108 大小） 
# - 需要策略图标的在策略后加上：img-url=http://example.com/icon.png
# - direct/proxy/reject 则只能用本地图标，名字分别为 direct.png, proxy.png,reject.png 放置于 Images 文件夹下即可生效 (108*108 大小)
# icon 参考使用: https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/
# - img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/图标名称.png


# /-------- 节点定义开始 --------/

# 自动选择最优节点
# - 为了节省流量，将过滤掉 “游戏” 类节点： server-tag-regex = ^(?!.*游戏)
# - url-latency-benchmark 延迟策略组，选取延迟最优节点。;url-latency-benchmark=policy-name-4, Sample-A, Sample-B, Sample-C
url-latency-benchmark = Auto-Switch-Node, server-tag-regex = ^(?!.*游戏), check-interval = 600, tolerance = 0, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Auto.png

# 自定义节点组策略
static = Custom-Group-Node, TW, HK, US, JP, SG, KR, NL, TH, TR, RU, Other-Node, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Static.png
# - 节点按地区分组策略
#  - 美国
static = US, server-tag-regex = 美|美国|🇺🇸|US|us, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/US.png
#  - 香港
static = HK, server-tag-regex = 港|香港|🇭🇰|️HK|hk, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/HK.png
#  - 韩国
static = KR, server-tag-regex = 韩|韩国|️🇰🇷|KR|kr, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/KR.png
#  - 荷兰
static = NL, server-tag-regex = 荷|荷兰|🇳🇱|️NL|nl, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Country/MN.png
#  - 日本
static = JP, server-tag-regex = 日|日本|东京|🇯🇵|JP|jp, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/JP.png
#  - 泰国
static = TH, server-tag-regex = 泰|泰国|🇹🇭|TH|th|VN|vn, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/TH.png
#  - 土耳其
static = TR, server-tag-regex = 土|土耳其|🇹🇷|TR|tr, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/TR.png
#  - 台湾
static = TW, server-tag-regex = 台|台湾|TW|tw, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/TW.png
#  - 新加坡
static = SG, server-tag-regex = 新|新加坡|狮城|🇸🇬|SG|sg, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/SG.png
#  - 俄罗斯
static = RU, server-tag-regex = 俄|俄罗斯|🇷🇺|RU|ru, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/RU.png

#  - 地区分组漏网之鱼
static = Other-Node, server-tag-regex = ^(?!.*(美|美国|🇺🇸|US|us|港|香港|🇭🇰|️HK|hk|日|日本|东京|🇯🇵|JP|jp|台|台湾|TW|tw|新|新加坡|狮城|🇸🇬|SG|sg|俄|俄罗斯|RU|ru|韩|韩国|️KR|kr|荷|荷兰|️NL|nl|泰|泰国|东京|TH|th|VN|vn|土|土耳其|TR|tr)).*, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Static.png

# 特殊节点分组策略
# 特殊节点策略
static = Special-Node, FASTX, IPLC-Node
## 倍速节点
static = FASTX, server-tag-regex = x1.5|x2.0|x4.0, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/x4.0.png
## 专线节点
static = IPLC-Node, server-tag-regex = 专线|IPLC|iplc|BGP|bgp, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/IPLC.png
## 游戏节点
;static = Game-Node, server-tag-regex = 游戏|Game|game, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Game.png

# 最终节点策略：如果以上的策略均未被匹配到，则听从此策略组的规定，包含所有节点，都通过代理访问
static = Final, Auto-Switch-Node, Custom-Group-Node, Special-Node, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Final.png

# /-------- 节点定义完成 --------/

# /-------- 策略节点开始 --------/
# * 顺序与 filter_remote 一致，方便对照*
# eg: static = Mainland, Final, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/China.png
# static：这是一条 静态策略组
# =Mainland,可以选择使用Final策略(组)、proxy策略、direct策略的策略组
# 选中 Final: 将使用 Final 的策略组中选中的节点进行网络访问
# 选中 proxy：将使用 proxy 下选中的节点进行网络访问
# 选中 direct：将不使用代理，通过直连的方式进行网络访问
# img-url=：策略组在Quantumult X首页采用的图标(icon)
# server-tag-regex=：根据节点名来筛选节点

# 修正 PROXY 和 REJECT 直接直连
static= Unbreak, direct, proxy, img-url= https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Direct.png

# 广告策略
# - ⚠️该策略所对应的分流规则集十分庞大，12w+，请谨慎使用
static = Advertising, reject, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Advertising.png

# 国外
# - 国外媒体细分策略
## Google
static = Google, TW, HK, JP, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Google.png

## Twitter
static = Twitter, TW, HK, JP, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Twitter.png

## YouTube
static = YouTube, Special-Node, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/YouTube.png

## Telegram
static = Telegram, TW, HK, JP, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Telegram.png

## Pornhub
static = Pornhub, TW, HK, JP, US, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Pornhub.png

## Netflix
static = Netflix, US, SG, HK, TW, JP, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Netflix.png

## Cloudflare
static = Cloudflare, TW, HK, JP, Final, proxy, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Cloudflare.png

## Apple
static = Apple, Final, proxy, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Apple.png

## Microsoft
static = Microsoft, Final, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Microsoft.png

## Speedtest
static = Speedtest, Final, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Speedtest.png

## GMedia
### - 国外媒体策略
static = GMedia, TW, HK, JP, Final, proxy, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/GlobalMedia.png

## 国外连接遗漏策略处理
static = Outside, Final, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/Global.png

## 国外其他媒体策略
# static = Disney+, US, SG, HK, Final, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Disney+.png
# static = HBO, US, HK, TW, Final, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/HBO.png
# static = Spotify, US, SG, HK, TW, JP, Final, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Spotify.png
# static = TikTok, US, SG, HK, TW, JP, Final, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Tiktok.png
# static = TestFlight, Final, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/TestFlight.png
# static = PayPal, direct, US, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Paypal.png


# 国内
## 国内媒体细分策略
# static = Bilibili, HK, TW, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Bilibili.png
# static = iQiYi, TW, direct, img-url = https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Aiqiyi.png

## 国内媒体决断策略
static = Mainland, Final, proxy, direct, img-url = https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/China.png


# /-------- 策略节点结束 --------/

# 分流规则 [filter_remote]/[filter_local]
# - 分流规则 是一个list文件
# - 分流规则A 可以被 分流规则B 包含
# - 分流规则 存在先后顺序，靠前规则优先生效，打乱顺序可能导致规则失效
# - 例如：GeQ1an 的 GMedia.list 规则中 已经包含了 Netflix.list / Spotify.list / YouTube.list
# - 如果你要对 Netflix.list / Spotify.list / YouTube.list 进行重新排序，请确保它们位于 GMedia.list 前面
# - 分流工作原理： 如果发起的网络访问 命中了分流规则列表中包含的域名，那么访问请求将会被分发至这条规则指定的策略组。访问成功与否取决于策略组
# - 参数说明🌲
# - tag=：给分流规则命名，建议对应策略命名
# - enabled=：是否启用该分流规则，true/启用、false/停用
# - update-interval 为更新时间参数，单位 秒, 默认更新时间为 24*60*60=86400 秒，也就是24小时
# - opt-parser=true/false 用于控制是否对本订阅 开启资源解析器，不写或者 false 表示不启用解析器
# - force-policy: 强制策略组，如果分流规则设置了该参数，且等值于某策略（static），则使用该策略
# - 举例：使用 force-policy 强制让 [GMedia 规则] 分流规则使用 [GMedia] 策略偏好
# - https://raw.githubusercontent.com/GeQ1an/Rules/master/QuantumultX/Filter/GMedia.list, tag=GMedia 规则, force-policy=GMedia, enabled=true
# - * 如果已经存在 [GMedia] 策略组，则 [GMedia 规则] 分流规则与 [GMedia] 策略组绑定
# - * 如果不存在 [GMedia] 策略组，则 force-policy 将强制自动生成一个只包含direct/直连 和 reject/拒绝 两个内置策略的 [GMedia] 策略组

[filter_remote]
# 远程分流规则订阅
# - 将网络请求进行分流，网络请求的走向(是否能成功访问)由匹配到的策略组决定
# - 部分规则有先后顺序要求，调整顺序可能失效
# 【参数】
#  参数「tag」、「force-policy」和「enabled」是可选的。
# - url: 规则订阅地址，不写参数名，直接写规则地址即可
# - tag: 规则订阅标签
# - force-policy: 强制策略组，如果分流规则设置了该参数，且等值于某策略（static），则使用该策略

# 规则顺序
# - 1. Unbreak.list - 用于修正 PROXY 和 REJECT 行为
# - 2. Advertising.list - 广告、行为分析、隐私追踪（macOS 不建议开启）
# - 15. China.list - 国内网站/应用

# 用于修正 PROXY 和 REJECT 行为
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Unbreak.list, tag=Unbreak, force-policy=direct, enabled=true
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Unbreak.list, tag=Unbreak, force-policy=direct, enabled=true, opt-parser=true, update-interval=172800,

# 去广告规则
# ;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Advertising/Advertising.list, tag = Advertising, force-policy = Advertising, update-interval = 172800, opt-parser = false, enabled = true
;https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Advertising.list, tag=🛡Advertising, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true
;https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/AdvertisingPlus.list, tag=🛡Advertising+, force-policy=Advertising, update-interval=172800, opt-parser=true, enabled=true

# Privacy 隐私
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Privacy.list, tag=🛡️Privacy, force-policy=reject, update-interval=172800, opt-parser=true, enabled=false

# Hijacking 运营商劫持或恶意网站
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/Guard/Hijacking.list, tag=🛡️Hijacking, force-policy=reject, update-interval=172800, opt-parser=true, enabled=true

# Google 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Google/Google.list, tag = Google规则, force-policy = Google, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Google.list, tag=Google, enabled=true

# Twitter 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Twitter/Twitter.list, tag = Twitter规则, force-policy = Twitter, update-interval = 86400, opt-parser = false, enabled = true

# Youtube 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX//YouTube/YouTube.list, tag = YouTube 规则, force-policy = YouTube, update-interval = 86400, opt-parser = false, enabled = true

# Telegram 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Telegram/Telegram.list, tag = Telegram 规则, force-policy = Telegram, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/SNS/Telegram.list, tag=Telegram, force-policy=Telegram, enabled=true

# Netflix 规则
;https://raw.githubusercontent.com/DivineEngine/Profiles/master/Surge/Ruleset/StreamingMedia/Video/Netflix.list, tag= Netflix 规则, force-policy=Netflix, update-interval=172800, opt-parser=true, enabled=false
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Netflix/Netflix.list, tag = Netflix 规则, force-policy = Netflix, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/Netflix.list,  tag=Netflix, enabled=true

# PornHub 规则
https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Media/Foreign/Pornhub.list, tag=PornHub,force-policy = Pornhub, enabled=true

# Cloudflare 规则
https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Cloudflare.list, tag=CloudFlare,force-policy = Cloudflare, enabled=true

# Apple 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Apple/Apple.list, tag = Apple 规则, force-policy = Apple, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Apple.list, tag=Apple, force-policy=direct, enabled=true


# Microsoft 规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Microsoft/Microsoft.list, tag = Microsoft 规则, force-policy = Microsoft, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Services/Microsoft.list, tag=Microsoft, force-policy=direct, enabled=true

# Speedtest规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Speedtest/Speedtest.list, tag = Speedtest 规则, force-policy = Speedtest, update-interval = 86400, opt-parser = false, enabled = true

# 出国媒体规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/GlobalMedia/GlobalMedia.list, tag = GMedia 规则, force-policy = GMedia, update-interval = 86400, opt-parser = false, enabled = true

# 出国总规则
https://raw.githubusercontent.com/GeQ1an/Rules/master/QuantumultX/Filter/Outside.list, tag = Outside 规则, force-policy = Outside, update-interval = 86400, opt-parser = false, enabled = true

# Disney 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Disney/Disney.list, tag = Disney, force-policy = Disney+, update-interval = 86400, opt-parser = true, enabled = true
# HBO 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/release/rule/QuantumultX/HBO/HBO.list, tag = HBO, force-policy = HBO, update-interval = 172800, opt-parser = true, enabled = true
# Spotify 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/Spotify/Spotify.list, tag = Spotify 规则, force-policy = Spotify, update-interval = 86400, opt-parser = false, enabled = true
# Tiktok 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TikTok/TikTok.list, tag = TikTok 规则, force-policy = TikTok, update-interval = 86400, opt-parser = false, enabled = true
# Paypal 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/PayPal/PayPal.list, tag = PayPal 规则, force-policy = PayPal, update-interval = 86400, opt-parser = false, enabled = true
# TestFlight 规则
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/TestFlight/TestFlight.list, tag = TestFlight, force-policy = TestFlight, update-interval = 86400, opt-parser = false, enabled = true

# 国内媒体规则
# Bilibili
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/BiliBili/BiliBili.list, tag = Bilibili, force-policy = Bilibili, update-interval = 172800, opt-parser = false, enabled = true
# iQiYi
# https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/iQIYI/iQIYI.list, tag = iQiYi, force-policy = iQiYi, update-interval = 172800, opt-parser = false, enabled = true
# 国内总规则
https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/China/China.list, tag = Mainland 规则, force-policy = Mainland, update-interval = 86400, opt-parser = false, enabled = true
;https://raw.githubusercontents.com/sve1r/Rules-For-Quantumult-X/develop/Rules/Region/China.list, tag=Domestic, force-policy=direct, enabled=true


[filter_local]
# 本地分流规则
# - 所有规则下本地规则优先生效
# 参数说明
# @user-agent 用户代理
# user-agent, ?abc*, proxy
# @host 主机
# host www.google.com proxy
# @host-keyword 主机关键字
# host-keyword, adsite, reject
# @host-suffix 主机后缀
# host-suffix, .google.com, proxy

# 绕过企业证书过期
host, ocsp.apple.com, reject


# 其它
## 以下 5 条配置不存在时，首页节点和策略不可见，所以必须配置 ---- 存疑
# Local Area Network 局域网
host-suffix, local, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 100.64.0.0/10, direct
ip-cidr, 224.0.0.0/4, direct
ip6-cidr, fe80::/10, direct
# GeoIP China(若启用，则禁用 ChinaIP.list)
geoip, cn, Mainland

final, Final
# 本地分流规则默认不可动配置 - end

[server_local]
# 本地服务器节点

[server_remote]
# 远程服务器引用(订阅)，支持远程订阅地址和本地文件
# 订阅链接, tag=我的订阅, img-url=https://raw.githubusercontent.com/Koolson/Qure/master/IconSet/CrossWall.png, update-interval=43200, opt-parser=true, enabled=true
# 订阅信息，可多个。只能添加 Quantumult X 格式的订阅链接。不符合该格式的，只能通过 Quantumult X - 节点 - 引用（订阅） - + - 打开资源解析器 进行添加。

# <link>, tag = <订阅备注>
# 参数「tag」和「enabled」是可选的。
# 各种远程资源的默认同步时间间隔是 86400 秒。
# 你可以设置 update-interval=172800 来自定义你的自动同步时间间隔(秒)，负数表示禁用自动同步。

[rewrite_remote]
# 远程重写订阅
# 包含主机名 hostname 以及复写 rewrite 规则
# update-interval 为更新时间参数，单位：秒, 默认更新时间为：24*60*60=86400 秒，也就是24小时
# opt-parser = true/false 用于控制是否对订阅开启资源解析器，不写或者 false 表示不启用解析器

# General
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/General.conf, tag = DivineEngine/GMediaFake302, update-interval=86400, enabled=true

# NobyDa聚合js
# 包含：去微信公众号广告、广告、知乎去广告、京东比价、Netflix评分等
https://raw.githubusercontent.com/NobyDa/Script/master/QuantumultX/Js.conf, tag = NobyDa/去广告合集, update-interval = 172800, opt-parser = false, enabled = false


# Block Advertising
;https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/Advertising.conf, tag=🛡Block Advertising, update-interval=172800, enabled=true

# Block Advertising+
;https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/AdvertisingPlus.conf, tag=🛡Block Advertising+, update-interval=172800, enabled=true

# Block YouTube Ads
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=🛡Block YouTube Ads, update-interval=172800, enabled=false

# Block Aweme Ads
https://raw.githubusercontent.com/DivineEngine/Profiles/master/Quantumult/Rewrite/Block/AwemeAds.conf, tag=🛡Block Aweme Ads(<= 16.2.0), update-interval=172800, enabled=false

# blackmatrix7 ios_rule_script 规则合集
# - https://github.com/blackmatrix7/ios_rule_script
# 去除广告
;https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rewrite/QuantumultX/Advertising/Advertising.conf, tag = 去广告, update-interval = 86400, opt-parser = false, enabled = true

# zwf234 / rules
# - https://github.com/zwf234/rules
;https://raw.githubusercontent.com/zwf234/rules/master/QuantumultX/qxrules.conf, tag = 解锁/去广告合集, update-interval = 172800, opt-parser = false, enabled = false


# Chavy Script - BoxJs
# - https://github.com/chavyleung/scripts
;https://raw.githubusercontent.com/chavyleung/scripts/master/box/rewrite/boxjs.rewrite.quanx.conf, tag = BoxJS, update-interval = 86400, opt-parser = false, enabled = true


[rewrite_local]


[task_local]
;包含3⃣️种类型: cron 定时任务，UI交互脚本，网络切换脚本

; 1⃣️ 任务模块，可用于签到,天气话费查询等
;js文件放于iCloud或者本机的Quantumult X/Scripts 路径下。TF版本可直接使用远程js链接
;从 “分” 开始的5位cron 写法，具体 cron 表达式可自行 Google
;比如上述语句 代表每天 12 点 2 分，自动执行一次;
;tag参数为 task 命名标识;
;img-url参数用于指定 task 的图标(108*108)

;2 12 * * * sample.js, tag=本地示范(左滑编辑，右滑执行), enabled=false, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png
;13 12 * * * https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-task.js, tag=远程示范(点击缓存/更新脚本), enabled=false, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png


# 2⃣️ UI交互查询脚本示范，在首页长按 节点/策略组 唤出
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/streaming-ui-check.js, tag = 流媒体 - 解锁查询，img-url=checkmark.seal.system, enabled=true

# 3⃣️ 网络切换/变化时 触发的脚本类型
;event-network sample-taks.js

#
# $task.fetch() 组成一个 HTTP 请求并处理响应，只支持 text body。如果您想要 serial requests 而不是 current requests，可以将 $task.fetch() 嵌入到另一个 $task.fetch() 的完成处理程序中。
#
# 脚本应保存在本地「我的 iPhone - Quantumult X - Scripts」或「iCloud Drive - Quantumult X - Scripts」中。示例：https://github.com/crossutility/Quantumult-X/blob/master/sample-task.js
#
# 默认的 HTTP 请求超时是 10 秒。
#
# 支持 5 或 6 个 cron 字段，不包括命令字段。
#
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/geo_location.js, tag=GeoIP查询, img-url=location.fill.viewfinder.system
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/nf-ui-check.js, tag=Netflix解锁检测, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Netflix.png, enabled=true
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/ytb-ui-check.js, tag=YouTube Premuim检测, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Youtube.png, enabled=true
event-interaction https://raw.githubusercontent.com/KOP-XIAO/QuantumultX/master/Scripts/disney-ui-check.js, tag=Disney⁺ 查询, img-url=https://raw.githubusercontent.com/erdongchanyo/icon/main/Policy-Filter/Disney+.png, enabled=true
5 0 * * * https://raw.githubusercontent.com/NobyDa/Script/master/JD-DailyBonus/JD_DailyBonus.js, tag=东多合一签到, img-url=https://raw.githubusercontent.com/ChuheGit/1/main/QuantumultX/Gallery/API-Icon/JD_DailyBonus.png, enabled=true
2 9 * * * https://raw.githubusercontent.com/ChuheGit/1/main/Script/jd_scripts/jd_bean_change.js, tag=京豆变动通知, img-url=https://raw.githubusercontent.com/ChuheGit/1/main/QuantumultX/Gallery/API-Icon/jd_bean_change.png, enabled=true

[http_backend]
#
# 部署一个本地 HTTP 服务器，并使用 JavaScript 进行数据处理。
# 输入变量为：$reqeust.url、$reqeust.path、$reqeust.headers、$reqeust.body。
# 使用 $done 输出像 $done({status:"HTTP/1.1 200 OK"}, headers:{}, body:"here is a string") 这样的返回响应。
# 此外，您还可以使用签名或任何其他验证方法来验证请求是否合法。
# 部署后您应该通过 http://127.0.0.1:9999/your-path/your-api/. 进行访问。服务器默认监听端口为 9999，您可以在UI中进行更改。
#
[mitm]
# mitm，中间人攻击。
# - 开启 mitm，需要自行在 Quantumult X 中生成证书、安装、信任。不然无法开启 mitm，甚至是无法开启 Quantumult X
#
# 只有「hostname」中的 TLS SNI 或目标地址将被 MitM 处理。
#
# 默认情况下，当为 HTTPS 请求启用 MitM 时，Quantumult X 会从原站点获取证书（证书会被缓存），保留大部分需要的原始证书信息，并使用 MitM 的 root CA 重新签名，这是推荐的（也是比较兼容的）MitM 证书创建方式。
#
# 偶尔有些用户喜欢调试 HTTPS 请求，其域名不存在，所以原证书根本不存在。当参数 simple_cert_hostname 出现的时候。其 TLS SNI 名称在 simple_cert_hostname(及 hostname) 中的 HTTPS 请求将使用纯本地生成的 MitM 证书。
#
# 注意！！！您应该始终保护您的 CA 密码和 p12 的私密性。
#
# 是否跳过验证证书
skip_validating_cert = false
# 是否强制嗅域名
force_sni_domain_name = false
passphrase = 
p12 = 

hostname = api.weibo.cn, mapi.weibo.com, *.uve.weibo.com, mp.weixin.qq.com, www.zhihu.com, api.zhihu.com, link.zhihu.com, vip1.kuwo.cn, p.du.163.com, api.m.jd.com, ios*.prod.ftl.netflix.com, api.polaxiong.com,notability.com
